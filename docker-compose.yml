services:
  app_db:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME:-test_db}
      - POSTGRES_USER=${DB_USER:-test_user}
      - POSTGRES_PASSWORD=${DB_PASS:-test_pass}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${DB_NAME:-test_db} -U ${DB_USER:-test_user}",
        ]
      interval: 1s
      timeout: 5s
      retries: 10

  app_user:
    build:
      context: ./user
      dockerfile: Containerfile
    restart: always
    environment:
      - HOST=app_db
      - DATABASE=${DB_NAME:-test_db}
      - USERNAME=${DB_USER:-test_user}
      - PASSWORD=${DB_PASS:-test_pass}
    depends_on:
      app_db:
        condition: service_healthy

  app_orders:
    build:
      context: ./orders
      dockerfile: Containerfile
    restart: always
    environment:
      - HOST=app_db
      - DATABASE=${DB_NAME:-test_db}
      - USERNAME=${DB_USER:-test_user}
      - PASSWORD=${DB_PASS:-test_pass}
    depends_on:
      app_db:
        condition: service_healthy

  app_products:
    build:
      context: ./products
      dockerfile: Containerfile
    restart: always
    environment:
      - HOST=app_db
      - DATABASE=${DB_NAME:-test_db}
      - USERNAME=${DB_USER:-test_user}
      - PASSWORD=${DB_PASS:-test_pass}
    depends_on:
      app_db:
        condition: service_healthy

  # the entry point container
  proxy_front:
    build:
      context: ./proxy-front
      dockerfile: Containerfile
    restart: always
    ports:
      - 8000:80 # for all in all server
      - 3000:3000 # for user app
      - 4000:4000 # for orders app
      - 5000:5000 # for products app
    depends_on:
      - app_user
      - app_orders
      - app_products

volumes:
  pgdata:
